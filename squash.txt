Range 0,1,5,0,1,5:-1→C:.1→I:Ran#/9→J:1→E:Ran#→F:F→P:Lbl 0:Cls:Plot 0,1:Plot 1,1:Line:
Plot 1,P-I:Plot 1,P+I:Line:-I→I:Lbl 1:E+I→E:F+J→F:Plot E,F:F≤0⇒-J→J:F≥1⇒-J→J:
Frac E≠0⇒Goto 1:E=1⇒Goto 2:?→P:Goto 0:Lbl 2:Isz C:Abs (P-F→J:J≤I⇒Goto 0:C

List of variables:
  C: score
  I: ball X increment, as well as racket width (constant = 0.1)
  J: ball Y increment (start=random; upon hitting racket it becomnes offset from racket centre)
  E: ball X coordinate (0 = end wall; 1 = racket position)
  F: ball Y coordinate (0 and 1 = side walls)
  P: paddle Y coordinate, user input (X is always 1)

List of labels:
  Lbl 0: draw court + racket
  Lbl 1: move/draw ball and check walls
  Lbl 2: check ball lands on racket
  Lbl 3: game over

Notes:
- when the ball reaches the end wall, the user is prompted to enter the Y co-ordinate for the racket. This should be between 0 and 1, but the program does not test-prevent entering a value outside this range. Needless to say, if you do, you will lose.
- for the function Range, you can set Xscl and Yscl to any number higher than 1, but making it an integer saves steps. I used 5.
- starting angle is defined by Ran#/9; you can use any number, but again, an integer saves steps. Using 9 makes it easy, using a lower integer would create a higher start "angle".
- "Plot 0,1:Plot 1,1:Line:" is purely cosmetic so that all room walls are drawn. You could skip it to save 12 steps, but it wouldn't look as nice.
